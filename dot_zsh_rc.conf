##### zsh 配置文件 #####



#if [ -z "$TMUX" ] && [ -n "$TERM" ] && [ "$TERM_PROGRAM" != "vscode" ]; then
    # 尝试附加到现有会话
    # tmux attach -t 0 || tmux new -s 0
    # 退出 tmux 时也退出终端
    # exit
# fi


# 如果已经存在session不再重复创建
# export ZELLIJ_AUTO_ATTACH=true
# When zellij exits, the shell exits as well.
# export ZELLIJ_AUTO_EXIT=true



# 启动zellij

# 如果是 kitty 终端，则启动 zellij
# if [ "$TERM" = "xterm-kitty" ]; then
    # 检查 zellij 是否已安装
    # if command -v zellij &> /dev/null; then
        # 检查是否已在 zellij 会话中，避免嵌套
        # if [ -z "$ZELLIJ" ]; then
            # 启动 zellij（如果未附加到会话）
            # exec zellij attach -c default || zellij attach
            # eval "$(zellij setup --generate-auto-start zsh)"

        # fi
    # fi
# fi


# 处理conda报错: 
# Error while loading conda entry point: conda-content-trust (OpenSSL 3.0's legacy provider failed to load. This is a fatal error by default, but cryptography supports running without legacy algorithms by setting the environment variable CRYPTOGRAPHY_OPENSSL_NO_LEGACY. If you did not expect this error, you have likely made a mistake with your OpenSSL configuration.)
export CRYPTOGRAPHY_OPENSSL_NO_LEGACY=1

### 脚本路径 ###

# My Script
export PATH="$PATH:/home/piako/Codes/MyScript"
# JetBrains Toolbox
export PATH="$PATH:/home/piako/.local/share/JetBrains/Toolbox/scripts"
# cargo
export PATH="$PATH:/home/piako/.cargo/bin"




##### exa alias #####

# 查看当前目录下的文件
alias ls='eza --icons --git'
alias l='eza --icons --git'
alias ll='eza --long --icons --git'

# 查看当前目录下的文件(树状)
alias lt='eza -T --level=2 --icons --git --git-ignore'

# 查看当前目录下的所有文件
alias la='eza -a --icons --git'

# 查看当前目录下的所有文件(长格式)
alias lla='eza -a -l --icons --git'

# 查看当前目录下的文件(长格式)
alias lsf='eza -l --icons --git'

# 查看当前目录下的文件夹
alias lsd='eza -l --icons --git --only-dirs'

##### exa alias #####



# nvm setting
# Set up Node Version Manager
# source /usr/share/nvm/init-nvm.sh

#延迟加载nvm

lazynvm() {
  unset -f nvm node npm
  export NVM_DIR=~/.nvm
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
}

nvm() {
  lazynvm 
  nvm $@
}
 
node() {
  lazynvm
  node $@
}
 
npm() {
  lazynvm
  npm $@
}

npx() {
  lazynvm
  npx $@
}







# yazi 配置 提供了在退出 Yazi 时更改当前工作目录的功能
function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

alias yazi=y

# wayland vscode设置
# alias code='code --enable-features=UseOzonePlatform --ozone-platform=wayland --enable-wayland-ime '

##### fzf设置 #####

# 读取快捷键绑定配置
source <(fzf --zsh)

# 使用fzf + cd 打开目录

fcd() {
    local dir
    dir=$(fd --type d | fzf --reverse --height 50% --preview "eza --tree --color=always --git-ignore {}") && cd "$dir" || exit

}

# 使用fzf + code 打开文件夹

fco() {
    local dir
    dir=$(fd --type d | fzf --reverse --height 50% --preview "eza --tree --color=always --git-ignore {}") && code "$dir"
}

# 使用fzf + code打开文件

fcf() {
    local file
    file=$(fd . -H --type f -E .git | fzf --reverse --preview "[[ $(file --mime {}) =~ binary ]] && echo 'Binary file' || bat --style=numbers --color=always --line-range :200 {}") && code "$file"
}

# 定义一个新的 z 函数，封装原 z 函数并输出当前目录路径
function z() {

    __zoxide_z "$@"

    # 输出当前目录路径
    pwd
}



# 在当前位置启动dolphin，并退出终端
alias dole='dolphin . & disown; exit'
# 在当前位置启动dolphin
alias dol='dolphin . & disown'

# xdg-open: 使用默认应用程序打开文件
alias open='xdg-open'

alias opene='open . ; exit'

# 退出
alias e='exit'


# 配置pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"




function cur() {
    cursor $1 &
}

# 编辑zsh配置文件
alias ezshrc='code ~/.zsh_rc.conf'

# 配置python
alias py='python'

# 配置ipython
alias ipy='ipython'

alias coa="conda activate pytorch"
alias cod="conda deactivate"

alias vi='nvim'
alias vim='nvim'


alias icat='kitten icat'
# 检查网络连接
check_network() {
    if ping -c 1 -W 1 www.baidu.com &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# 查询待更新的包的数量
check_updates() {
    if check_network; then
        echo "网络连接正常。"
        updates=$(pacman -Qu | wc -l)
        if [ "$updates" -gt 0 ]; then
            echo "有 $updates 个包可以更新。"
        else
            echo "系统已经是最新的，没有可用的更新。"
        fi
    else
        echo "网络连接失败，无法检查更新。"
    fi
}


alias search='firefox --search'

